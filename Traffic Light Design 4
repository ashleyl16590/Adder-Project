//FSM for Traffic Light State Machine #1
module fsm_traffic_light (
  clock,
  reset,
  em,
  n_red,
  n_yellow,
  n_green,
  n_left_yellow,
  n_left_green,
  e_red,
  e_yellow,
  e_green,
  e_left_yellow,
  e_left_green
);
 
  //Input Ports
  input clock, reset, em;
  
  //Output Ports
  output n_red, n_yellow, n_green, n_left_yellow, n_left_green, e_red, e_yellow, e_green, e_left_yellow, e_left_green;
  
  //Input Ports Data Type
  wire clock, reset, em;
  
  //Output Ports Data Type
  reg n_red, n_yellow, n_green, n_left_yellow, n_left_green, e_red, e_yellow, e_green, e_left_yellow, e_left_green;
  
  //Internal Constants
  parameter SIZE = 10;
  parameter IDLE=10'b0000000001, S1=10'b0000000010, S2=10'b0000000100, S3=10'b0000001000, S4=10'b0000010000, S5=10'b0000100000, S6=10'b0001000000, S7=10'b0010000000, S8=10'b0100000000, S9=10'b1000000000;
  
  //Internal Variables
  reg [SIZE-1:0] state;
  reg [SIZE-1:0] next_state;
  reg [SIZE-1:0] current_state;
  
  //Code Starts Here
  assign next_state = fsm_function(state);
  assign current_state = stay_function(state);
  
  //Function for Combo Logic
  function [SIZE-1:0] fsm_function;
    input [SIZE-1:0] state;
    case(state)
      IDLE: begin
          fsm_function = S1;
        end
      S1: begin
          fsm_function = S2;
      end
      S2: begin
          fsm_function = S3;
        end
      S3: begin
          fsm_function = S4;
      end
      S4: begin
          fsm_function = S5;
        end
      S5: begin
          fsm_function = S6;
        end
      S6: begin
        fsm_function = S7;
      end
      S7: begin
        fsm_function = S8;
      end
      S8: begin
        fsm_function = S9;
      end
      S9: begin
        fsm_function = IDLE;
      end
    default: fsm_function = IDLE;
    endcase
  endfunction
  
  function [SIZE-1:0] stay_function;
    input [SIZE-1:0] state;
    case(state)
      IDLE: begin
          stay_function = IDLE;
        end
      S1: begin
          stay_function = S1;
        end
      S2: begin
          stay_function = S2;
        end
      S3: begin
          stay_function = S3;
        end
      S4: begin
          stay_function = S4;
        end
      S5: begin
          stay_function = S5;
        end
      S6: begin
        stay_function = S6;
      end
      S7: begin
        stay_function = S7;
      end
      S8: begin
        stay_function = S8;
      end
      S9: begin
        stay_function = S9;
      end
    default: stay_function = IDLE;
    endcase
  endfunction
  
  //Seq Logic
  always @ (posedge clock)
    begin: FSM_SEQ
      if(reset == 1'b1) begin
        state <= IDLE;
      end else if(em == 1'b1) begin
        state <= current_state;
      end else begin
        state <= next_state;
      end
    end
  
  //Output Logic
  always @ (posedge clock)
    begin: OUTPUT_LOGIC
      if(reset == 1'b1) begin
		n_red <= 1'b1;
        n_yellow <= 1'b0;
        n_green <= 1'b0;
        n_left_yellow <= 1'b;
        n_left_green <= 1'b;
        e_red <= 1'b1;
        e_yellow <= 1'b0;
        e_green <= 1'b0;
        e_left_yellow <= 1'b;
        e_left_green <= 1'b;
      end
      else begin
        case(state)
          IDLE: begin
            n_red <= 1'b;
            n_yellow <= 1'b;
            n_green <= 1'b;
            n_left_yellow <= 1'b;
            n_left_green <= 1'b;
            e_red <= 1'b;
            e_yellow <= 1'b;
            e_green <= 1'b;
            e_left_yellow <= 1'b;
            e_left_green <= 1'b;
          end
          S1: begin
            n_red <= 1'b;
            n_yellow <= 1'b;
            n_green <= 1'b;
            n_left_yellow <= 1'b;
            n_left_green <= 1'b;
            e_red <= 1'b;
            e_yellow <= 1'b;
            e_green <= 1'b;
            e_left_yellow <= 1'b;
            e_left_green <= 1'b;
          end
          S2: begin
            n_red <= 1'b;
            n_yellow <= 1'b;
            n_green <= 1'b;
            n_left_yellow <= 1'b;
            n_left_green <= 1'b;
            e_red <= 1'b;
            e_yellow <= 1'b;
            e_green <= 1'b;
            e_left_yellow <= 1'b;
            e_left_green <= 1'b;
          end
          S3: begin
            n_red <= 1'b;
            n_yellow <= 1'b;
            n_green <= 1'b;
            n_left_yellow <= 1'b;
            n_left_green <= 1'b;
            e_red <= 1'b;
            e_yellow <= 1'b;
            e_green <= 1'b;
            e_left_yellow <= 1'b;
            e_left_green <= 1'b;
          end
          S4: begin
            n_red <= 1'b;
            n_yellow <= 1'b;
            n_green <= 1'b;
            n_left_yellow <= 1'b;
            n_left_green <= 1'b;
            e_red <= 1'b;
            e_yellow <= 1'b;
            e_green <= 1'b;
            e_left_yellow <= 1'b;
            e_left_green <= 1'b;
          end
          S5: begin
            n_red <= 1'b;
            n_yellow <= 1'b;
            n_green <= 1'b;
            n_left_yellow <= 1'b;
            n_left_green <= 1'b;
            e_red <= 1'b;
            e_yellow <= 1'b;
            e_green <= 1'b;
            e_left_yellow <= 1'b;
            e_left_green <= 1'b;
          end
          S6: begin
            n_red <= 1'b;
            n_yellow <= 1'b;
            n_green <= 1'b;
            n_left_yellow <= 1'b;
            n_left_green <= 1'b;
            e_red <= 1'b;
            e_yellow <= 1'b;
            e_green <= 1'b;
            e_left_yellow <= 1'b;
            e_left_green <= 1'b;
          end
          S7: begin
            n_red <= 1'b;
            n_yellow <= 1'b;
            n_green <= 1'b;
            n_left_yellow <= 1'b;
            n_left_green <= 1'b;
            e_red <= 1'b;
            e_yellow <= 1'b;
            e_green <= 1'b;
            e_left_yellow <= 1'b;
            e_left_green <= 1'b;
          end
          S8: begin
            n_red <= 1'b;
            n_yellow <= 1'b;
            n_green <= 1'b;
            n_left_yellow <= 1'b;
            n_left_green <= 1'b;
            e_red <= 1'b;
            e_yellow <= 1'b;
            e_green <= 1'b;
            e_left_yellow <= 1'b;
            e_left_green <= 1'b;
          end
          S9: begin
            n_red <= 1'b;
            n_yellow <= 1'b;
            n_green <= 1'b;
            n_left_yellow <= 1'b;
            n_left_green <= 1'b;
            e_red <= 1'b;
            e_yellow <= 1'b;
            e_green <= 1'b;
            e_left_yellow <= 1'b;
            e_left_green <= 1'b;
          end
        endcase
      end
    end
endmodule
